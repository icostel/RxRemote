package io.reactivex.remote.internal;

import android.os.IBinder;
import android.os.RemoteException;

/**
 * @hide Wraps a remote {@link IBinder} that implements {@link RemoteEventManager} interface
 * <p>
 * Autogenerated by <a href="https://bit.ly/Remoter">Remoter</a>
 * @see RemoteEventManager_Stub
 */
public class RemoteEventManager_Proxy implements RemoteEventManager {
    private static final String DESCRIPTOR = "polycom.conference.RemoteEventManager";

    private static final int TRANSACTION_subscribe_0 = android.os.IBinder.FIRST_CALL_TRANSACTION + 0;

    private static final int TRANSACTION_unsubscribe_1 = android.os.IBinder.FIRST_CALL_TRANSACTION + 1;

    private static final int TRANSACTION_close_2 = android.os.IBinder.FIRST_CALL_TRANSACTION + 2;

    private IBinder mRemote;

    /**
     * Initialize this {@link RemoteEventManager_Proxy} with the given {@link IBinder}
     *
     * @param binder An {@link IBinder} that exposes a remote {@link RemoteEventManager}
     */
    public RemoteEventManager_Proxy(IBinder binder) {
        this.mRemote = binder;
    }

    @Override
    public void close() {
        if (mRemote != null) {
            android.os.Parcel data = android.os.Parcel.obtain();
            android.os.Parcel reply = android.os.Parcel.obtain();
            try {
                data.writeInterfaceToken(DESCRIPTOR);
                mRemote.transact(TRANSACTION_close_2, data, reply, android.os.IBinder.FLAG_ONEWAY);
            } catch (RemoteException re) {
                throw new RuntimeException(re);
            } finally {
                reply.recycle();
                data.recycle();
            }
        }
        mRemote = null;
    }

    @Override
    public void subscribe(RemoteEventListener listener) {
        if (mRemote != null) {
            android.os.Parcel data = android.os.Parcel.obtain();
            android.os.Parcel reply = android.os.Parcel.obtain();
            try {
                data.writeInterfaceToken(DESCRIPTOR);
                data.writeStrongBinder(new RemoteEventListener_Stub(listener));
                mRemote.transact(TRANSACTION_subscribe_0, data, reply, android.os.IBinder.FLAG_ONEWAY);
            } catch (RemoteException re) {
                throw new RuntimeException(re);
            } finally {
                reply.recycle();
                data.recycle();
            }
        }
    }

    @Override
    public void unsubscribe() {
        if (mRemote != null) {
            android.os.Parcel data = android.os.Parcel.obtain();
            android.os.Parcel reply = android.os.Parcel.obtain();
            try {
                data.writeInterfaceToken(DESCRIPTOR);
                mRemote.transact(TRANSACTION_unsubscribe_1, data, reply, android.os.IBinder.FLAG_ONEWAY);
            } catch (RemoteException re) {
                throw new RuntimeException(re);
            } finally {
                reply.recycle();
                data.recycle();
            }
        }
    }


    /**
     * Register a {@link android.os.IBinder.DeathRecipient} to know of binder connection lose
     */
    public void linkToDeath(IBinder.DeathRecipient deathRecipient) {
        if (mRemote != null) {
            try {
                mRemote.linkToDeath(deathRecipient, 0);
            } catch (Exception ignored) {
            }
        }
    }

    /**
     * UnRegister a {@link android.os.IBinder.DeathRecipient} to know of binder connection lose
     */
    public void unLinkToDeath(IBinder.DeathRecipient deathRecipient) {
        if (mRemote != null) {
            try {
                mRemote.unlinkToDeath(deathRecipient, 0);
            } catch (Exception ignored) {
            }
        }
    }

    /**
     * @hide Internal - Reset the binder with the given one
     */
    public void resetBinder(IBinder binder) {
        this.mRemote = binder;
    }

}
